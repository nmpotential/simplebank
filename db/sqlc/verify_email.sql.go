// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: verify_email.sql

package db

import (
	"context"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails (
    username,     -- Username associated with the email verification
    email,        -- Email to be verified
    secret_code   -- Secret code for verification
) VALUES (
    $1,           -- Placeholder for username
    $2,           -- Placeholder for email
    $3            -- Placeholder for secret_code
) RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

// Inserts a new record into the 'verify_emails' table with username, email, and secret_code values
func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail, arg.Username, arg.Email, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one

UPDATE verify_emails
SET
    is_used = TRUE      -- Updates the is_used field to mark the verification as used
WHERE
    id = $1            -- Matches the ID of the record
    AND secret_code = $2  -- Matches the secret_code provided
    AND is_used = FALSE -- Ensures the verification email hasn't been used
    AND expired_at > now() -- Checks if the verification hasn't expired
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

// Returns the newly created verification email record
// Updates a verification email record setting is_used to TRUE under specific conditions
func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVerifyEmail, arg.ID, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
