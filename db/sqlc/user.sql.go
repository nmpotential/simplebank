// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,          -- User's username
  hashed_password,   -- Hashed password for security
  full_name,         -- User's full name
  email              -- User's email address
) VALUES (
  $1,                -- Placeholder for username
  $2,                -- Placeholder for hashed_password
  $3,                -- Placeholder for full_name
  $4                 -- Placeholder for email
) RETURNING username, hashed_password, full_name, email, password_changed_at, created_at, is_email_verified
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

// Inserts a new user record into the 'users' table with provided details
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT username, hashed_password, full_name, email, password_changed_at, created_at, is_email_verified FROM users
WHERE username = $1 LIMIT 1
`

// Returns the newly created user record
// Retrieves a single user record from 'users' table based on username
func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hashed_password = COALESCE($1, hashed_password),   -- Updates hashed_password if provided
  password_changed_at = COALESCE($2, password_changed_at), -- Updates password_changed_at if provided
  full_name = COALESCE($3, full_name),          -- Updates full_name if provided
  email = COALESCE($4, email),                      -- Updates email if provided
  is_email_verified = COALESCE($5, is_email_verified) -- Updates is_email_verified if provided
WHERE
  username = $6     -- Identifies the user by username
RETURNING username, hashed_password, full_name, email, password_changed_at, created_at, is_email_verified
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	FullName          pgtype.Text        `json:"full_name"`
	Email             pgtype.Text        `json:"email"`
	IsEmailVerified   pgtype.Bool        `json:"is_email_verified"`
	Username          string             `json:"username"`
}

// Updates a user record with provided data if not null (COALESCE used to manage NULL values)
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.IsEmailVerified,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
